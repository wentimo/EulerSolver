namespace EulersSolver.Problems
{
    internal class Problem2 : BaseProblem
    {
        protected override int ProblemNumber => 2;
        protected override bool HasBeenSolved => true;

        protected override void Solve()
        {
            /*
             Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

            By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
            */

            // Okay this is a tad confusing to explain.
            // Every 3rd fibonnaci is even based on 1,1,2,3,5,8,13,21,34... I'm sure this is provable.
            // Assume x > 2 and Fib(x) is an even value. Since every 3rd fibonnaci is even we know that Fib(x-3) is also even as is Fib(x+3).
            // I noticed that Fib(x+3) = 4*Fib(x) + Fib(x-3) through various attempts at figuring out a formula... I've completely forgotten how to go about proving this.
            // However this means we can calculate the next 'even' fibonnaci only knowing the previous even fibonnaci numbers, we don't need the odd ones at all!
            // Here's some examples:
            // fib(0) = 0, fib(3) = 2, fib(6) = 8, fib(9) = 34, fib(12) = 144
            //
            // fib(12) = 4*fib(9) + fib(6) == 4(34) + 8 == 136 + 8 == 144
            // fib(9) = 4*fib(6) + fib(3) == 4(8) + 2 == 32 + 2 == 34
            // fib(6) == 4*fib(3) + fib(0) == 4(2) + 0 == 8 + 0 == 8
            // fib(3) == 4*fib(0) + fib(-3) == 0 + UNDEFINED = 2 -- This one doesn't work but if you assume UNDEFINED = 2 you can begin a loop here and work your way up

            Initialize();

            int fib = 2, sum = 0, holder = 0;
            while (fib < 4000000)
            {
                sum += fib;
                var swapper = fib;
                fib = 4 * fib + holder;
                holder = swapper;
            }

            Finalize(sum);
        }
    }
}